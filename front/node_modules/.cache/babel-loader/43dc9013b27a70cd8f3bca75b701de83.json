{"remainingRequest":"/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/node_modules/babel-loader/lib/index.js!/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/src/api/users.js","dependencies":[{"path":"/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/src/api/users.js","mtime":1616938574000},{"path":"/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Applications/MAMP/htdocs/iim/nodejs/todo_app/front/src/api/users.js"],"names":["loginUser","user","fetch","method","headers","body","JSON","stringify","email","password","data","json","res","signupUser","username","getUser","getUserById","updateBio","token","bio"],"mappings":";;;AAAA,eAAe;AACXA,EAAAA,SAAS;AAAA,6EAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYC,KAAK,CAAC,uCAAD,EAA0C;AAC9DC,gBAAAA,MAAM,EAAE,MADsD;AAE9DC,gBAAAA,OAAO,EAAE;AACL,4BAAU,kBADL;AAEL,kCAAgB;AAFX,iBAFqD;AAM9DC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,kBAAAA,KAAK,EAAEP,IAAI,CAACO,KAAb;AAAoBC,kBAAAA,QAAQ,EAAER,IAAI,CAACQ;AAAnC,iBAAf;AANwD,eAA1C,CADjB;;AAAA;AACDC,cAAAA,IADC;AAAA;AAAA,qBASWA,IAAI,CAACC,IAAL,EATX;;AAAA;AASDC,cAAAA,GATC;AAAA;AAAA,qBAUMA,GAVN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADE;AAaXC,EAAAA,UAAU;AAAA,8EAAE,kBAAOZ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACWC,KAAK,CAAC,0CAAD,EAA6C;AACjEC,gBAAAA,MAAM,EAAE,MADyD;AAEjEC,gBAAAA,OAAO,EAAE;AACL,4BAAU,kBADL;AAEL,kCAAgB;AAFX,iBAFwD;AAMjEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,kBAAAA,KAAK,EAAEP,IAAI,CAACO,KAAb;AAAoBC,kBAAAA,QAAQ,EAAER,IAAI,CAACQ,QAAnC;AAA6CK,kBAAAA,QAAQ,EAAEb,IAAI,CAACa;AAA5D,iBAAf;AAN2D,eAA7C,CADhB;;AAAA;AACFJ,cAAAA,IADE;AAAA;AAAA,qBASUA,IAAI,CAACC,IAAL,EATV;;AAAA;AASFC,cAAAA,GATE;AAAA;AAAA,qBAUKA,GAVL;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAbC;AAyBXG,EAAAA,OAAO;AAAA,2EAAE,kBAAOd,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACcC,KAAK,CAAC,sCAAD,EAAyC;AAC7DC,gBAAAA,MAAM,EAAE,KADqD;AAE7DC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,iCADX;AAEL,oDAA2BH,IAA3B;AAFK;AAFoD,eAAzC,CADnB;;AAAA;AACCS,cAAAA,IADD;AAAA;AAAA,qBAQaA,IAAI,CAACC,IAAL,EARb;;AAAA;AAQCC,cAAAA,GARD;AAAA;AAAA,qBASQA,GATR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAzBI;AAoCXI,EAAAA,WAAW;AAAA,+EAAE,kBAAOf,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACUC,KAAK,CAAC,yCAAD,EAA4C;AAChEC,gBAAAA,MAAM,EAAE,KADwD;AAEhEC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,kBADX;AAEL,4BAAU,kBAFL;AAGL,wBAAMH;AAHD;AAFuD,eAA5C,CADf;;AAAA;AACHS,cAAAA,IADG;AAAA;AAAA,qBASSA,IAAI,CAACC,IAAL,EATT;;AAAA;AASHC,cAAAA,GATG;AAAA;AAAA,qBAUIA,GAVJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KApCA;AAgDXK,EAAAA,SAAS;AAAA,6EAAE,kBAAOhB,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACYC,KAAK,CAAC,6CAAD,EAAgD;AACpEC,gBAAAA,MAAM,EAAE,KAD4D;AAEpEC,gBAAAA,OAAO,EAAE;AACL,kCAAgB,kBADX;AAEL,4BAAU,kBAFL;AAGL,oDAA2BH,IAAI,CAACiB,KAAhC;AAHK,iBAF2D;AAOpEb,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBY,kBAAAA,GAAG,EAAElB,IAAI,CAACkB,GADO;AAEjBL,kBAAAA,QAAQ,EAAEb,IAAI,CAACa,QAFE;AAGjBN,kBAAAA,KAAK,EAAEP,IAAI,CAACO;AAHK,iBAAf;AAP8D,eAAhD,CADjB;;AAAA;AACDE,cAAAA,IADC;AAAA;AAAA,qBAcWA,IAAI,CAACC,IAAL,EAdX;;AAAA;AAcDC,cAAAA,GAdC;AAAA,gDAeAA,GAfA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhDE,CAAf","sourcesContent":["export default {\n    loginUser: async (user) => {\n        const data = await fetch('http://localhost:4443/api/users/login', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: user.email, password: user.password})\n        });\n        const res = await data.json()\n        return await res\n    },\n    signupUser: async (user) => {\n        const data = await fetch('http://localhost:4443/api/users/register', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({email: user.email, password: user.password, username: user.username})\n        })\n        const res = await data.json()\n        return await res\n    },\n    getUser: async (user) => {\n        const data = await fetch('http://localhost:4443/api/users/user', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/xxx-form-urlencoded',\n                'authorization': `Bearer ${user}`\n            }\n        })\n        const res = await data.json()\n        return await res\n    },\n    getUserById: async (user) => {\n        const data = await fetch('http://localhost:4443/api/users/user/id', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'id': user\n            }\n        })\n        const res = await data.json()\n        return await res\n    },\n    updateBio: async (user) => {\n        const data = await fetch('http://localhost:4443/api/users/user/update', {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'authorization': `Bearer ${user.token}`\n            },\n            body: JSON.stringify({\n                bio: user.bio,\n                username: user.username,\n                email: user.email\n            })\n        })\n        const res = await data.json()\n        return res\n    }\n}"]}]}